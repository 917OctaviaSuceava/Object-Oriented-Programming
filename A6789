- Replace the templated DynamicVector with the STL vector. Use STL algorithms wherever possible in your application
(e.g. in your filter function you could use copy_if, count_if). 
- Replace all your for loops either with STL algorithms, or with C++11's ranged-based for loop.

- Store data in a text file. When the program starts, entities are read from the file. Modifications made during program execution are stored in the file. 
Implement this using the iostream library. 
- Create insertion and extraction operators for your entities and use these when reading/writing to files or the console.

- Use exceptions to signal errors:
  > from the repository;
  > validation errors â€“ validate your entities using Validator classes;
  > create your own exception classes.
  > validate program input.
  > store your movie watch list in a file. When the application starts, the user should choose the type of file between CSV or HTML. 
Depending on the type, the application will save the list in the correct format.

- Add a new command, allowing the user to see the movie watch list.
- Create a UML class diagram for your entire application. For this, you can use any tool that you like.

- Create a graphical user interface using the Qt framework for the problem you have been working on.
- Implement the interface design (location and size of GUI widgets, without attached functionalities), without using the Qt Designer.
- The list or table displaying the repository entities in administrator mode should be populated using an input file.
- All functionalities must be available through the GUI.

